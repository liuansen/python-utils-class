# -*- coding:utf-8 -*-
# author：Anson
from __future__ import unicode_literals

from datetime import date
import datetime

from dateutil.relativedelta import relativedelta

"""
    2010年放假
    一、元旦：1月1日至3日放假公休，共3天。
　　二、春节：2月13日至19日放假调休，共7天。2月20日（星期六）、21日（星期日）上班。
　　三、清明节：4月3日至5日放假公休，共3天。
　　四、劳动节：5月1日至3日放假公休，共3天。
　　五、端午节：6月14日至16日放假调休，共3天。6月12日（星期六）、13日（星期日）上班。
　　六、中秋节：9月22日至24日放假调休，共3天。9月19日（星期日）、25日（星期六）上班。
　　七、国庆节：10月1日至7日放假调休，共7天。9月26日（星期日）、10月9日（星期六）上班。

    2011年放假
    一、元旦：1月1日至3日放假公休，共3天。
　　二、春节：2月2日（农历除夕）至8日放假调休，共7天。1月30日（星期日）、2月12日（星期六）上班。
　　三、清明节：4月3日至5日放假调休，共3天。4月2日（星期六）上班。
　　四、劳动节：4月30日至5月2日放假公休，共3天。
　　五、端午节：6月4日至6日放假公休，共3天。
　　六、中秋节：9月10日至12日放假公休，共3天。
　　七、国庆节：10月1日至7日放假调休，共7天。10月8日（星期六）、10月9日（星期日）上班。

    2012年放假
    一、元旦：2012年1月1日至3日放假调休，共3天。2011年12月31日（星期六）上班。
　　二、春节：1月22日至28日放假调休，共7天。1月21日（星期六）、1月29日（星期日）上班。
　　三、清明节：4月2日至4日放假调休，共3天。3月31日（星期六）、4月1日（星期日）上班。
　　四、劳动节：4月29日至5月1日放假调休，共3天。4月28日（星期六）上班。
　　五、端午节：6月22日至24日放假公休，共3天。
　　六、中秋节、国庆节：9月30日至10月7日放假调休，共8天。9月29日（星期六）上班。

    2013年放假
    一、元旦：1月1日至3日放假调休，共3天。1月5日（星期六）、1月6日（星期日）上班。
　　二、春节：2月9日至15日放假调休，共7天。2月16日（星期六）、2月17日（星期日）上班。
　　三、清明节：4月4日至6日放假调休，共3天。4月7日（星期日）上班。
　　四、劳动节：4月29日至5月1日放假调休，共3天。4月27日（星期六）、4月28日（星期日）上班。
　　五、端午节：6月10日至12日放假调休，共3天。6月8日（星期六）、6月9日（星期日）上班。
　　六、中秋节：9月19日至21日放假调休，共3天。9月22日（星期日）上班。
　　七、国庆节：10月1日至7日放假调休，共7天。9月29日（星期日）、10月12日（星期六）上班。

    2014年放假
    一、元旦：1月1日放假1天。
　　二、春节：1月31日至2月6日放假调休，共7天。1月26日（星期日）、2月8日（星期六）上班。
　　三、清明节：4月5日放假，4月7日（星期一）补休。
　　四、劳动节：5月1日至3日放假调休，共3天。5月4日（星期日）上班。
　　五、端午节：6月2日放假，与周末连休。
　　六、中秋节：9月8日放假，与周末连休。
　　七、国庆节：10月1日至7日放假调休，共7天。9月28日（星期日）、10月11日（星期六）上班。

    2015年放假
    一、元旦：1月1日至3日放假调休，共3天。1月4日（星期日）上班。
　　二、春节：2月18日至24日放假调休，共7天。2月15日（星期日）、2月28日（星期六）上班。
　　三、清明节：4月5日放假，4月6日（星期一）补休。
　　四、劳动节：5月1日放假，与周末连休。
　　五、端午节：6月20日放假，6月22日（星期一）补休。
　　六、中秋节：9月27日放假。
　　七、国庆节：10月1日至7日放假调休，共7天。10月10日（星期六）上班。

    2016年放假
    一、1月1日放假，与周末连休
    二、2月7日至13日放假调休，共7天。2月6日（星期六）、2月14日（星期日）上班。
    三、清明节：4月4日放假，与周末连休。
    四、劳动节：5月1日放假，5月2日（星期一）补休。
    五、端午节：6月9日至11日放假调休，共3天。6月12日（星期日）上班。
    六、中秋节：9月15日至17日放假调休，共3天。9月18日（星期日）上班。
    七、国庆节：10月1日至7日放假调休，共7天。10月8日（星期六）、10月9日（星期日）上班。

    2017年放假
    一、元旦 	12月31日~1月2日 	1月2日（星期一）补休 	共3天
    二、春节 	1月27日(除夕）~2月2日 	1月22日（星期日）、2月4日（周六）上班 	共7天
    三、清明节 	4月2日~4月4日 	4月1日（周六）上班 	共3天
    四、劳动节 	4月29日~5月1日 	与周末连休 	共3天
    五、端午节 	5月28日~5月30日 	5月27日（星期六）上班 	共3天
    六、国庆节/中秋节 	10月1日~10月8日 	9月30日（星期六）上班 	共8天
    
    2018年放假
    一、元旦 	1月1日放假，与周末连休。
    二、春节 	2月15日至21日放假调休，共7天。2月11日(星期日)、2月24日(星期六)上班。
    三、清明节 	4月5日至7日放假调休，共3天。4月8日(星期日)上班。
    四、劳动节 	4月29日至5月1日放假调休，共3天。4月28日(星期六)上班。
    五、端午节 	6月18日放假，与周末连休。
    六、中秋节 	9月24日放假，与周末连休。
    七、国庆节 	10月1日至7日放假调休，共7天。9月29日(星期六)、9月30日(星期日)上班。
    
    2019年放假
    一、元旦 	12月30日~1月1日	12月29日（周六）上班	共3天
    二、春节 	2月4日(除夕）~2月10日	2月2日（周六）、2月3日（周日）上班	共7天
    三、清明节 	4月5日~4月7日	与周末连休	共3天
    四、劳动节 	5月1日~5月4日	4月28日（周日）、5月5日（周日）上班	共4天
    五、端午节 	6月7日~6月9日	与周末连休	共3天
    六、中秋节 	9月13日~9月15日	与周末连休	共3天
    七、国庆节 	10月1日~10月7日	9月29日（周日）、10月12日（周六）上班	共7天
"""

CONST_FESTIVALS_LIST = [
    20100101,
    20100102,
    20100103,
    20100213,
    20100214,
    20100215,
    20100217,
    20100218,
    20100219,

    20100403,
    20100404,
    20100405,

    20100501,
    20100502,
    20100502,

    20100614,
    20100615,
    20100616,

    20100922,
    20100923,
    20100924,

    20101001,
    20101002,
    20101003,
    20101004,
    20101005,
    20101006,
    20101007,

    20110101,
    20110102,
    20110103,

    20110202,
    20110203,
    20110204,
    20110205,
    20110206,
    20110207,
    20110208,

    20110403,
    20110404,
    20110405,

    20110430,
    20110501,
    20110502,

    20110604,
    20110605,
    20110606,

    20110910,
    20110911,
    20110912,

    20111001,
    20111002,
    20111003,
    20111004,
    20111005,
    20111006,
    20111007,

    20120101,
    20120102,
    20120103,

    20120122,
    20120123,
    20120124,
    20120125,
    20120126,
    20120127,
    20120128,

    20120402,
    20120403,
    20120404,

    20120622,
    20120623,
    20120624,

    20120930,
    20121001,
    20121002,
    20121003,
    20121004,
    20121005,
    20121006,
    20121007,

    20130101,
    20130102,
    20130103,

    20130209,
    20130210,
    20130211,
    20130212,
    20130213,
    20130214,
    20130215,

    20130404,
    20130405,
    20130406,

    20130429,
    20130430,
    20130501,

    20130610,
    20130611,
    20130612,

    20130919,
    20130920,
    20130921,

    20131001,
    20131002,
    20131003,
    20131004,
    20131005,
    20131006,
    20131007,

    20140101,

    20140131,
    20140201,
    20140202,
    20140203,
    20140204,
    20140205,
    20140206,

    20140405,
    20140406,
    20140407,

    20140501,
    20140502,
    20140503,

    20140531,
    20140601,
    20140602,

    20140906,
    20140907,
    20140908,

    20141001,
    20141002,
    20141003,
    20141004,
    20141005,
    20141006,
    20141007,

    20150101,
    20150102,

    20150218,
    20150219,
    20150220,
    20150223,
    20150224,

    20150406,

    20150501,

    20150622,

    20150903,
    20150904,

    20151001,
    20151002,
    20151005,
    20151006,
    20151007,

    20160101,

    20160208,
    20160209,
    20160210,
    20160211,
    20160212,

    20160404,

    20160502,

    20160609,
    20160610,

    20160915,
    20160916,

    20161003,
    20161004,
    20161005,
    20161006,
    20161007,

    20161231,
    20170101,
    20170102,

    20170127,
    20170128,
    20170129,
    20170130,
    20170131,
    20170201,
    20170202,

    20170402,
    20170403,
    20170404,

    20170429,
    20170430,
    20170501,

    20170528,
    20170529,
    20170530,

    20171001,
    20171002,
    20171003,
    20171004,
    20171005,
    20171006,
    20171007,
    20171008,

    20180101,

    20180215,
    20180216,
    20180217,
    20180218,
    20180219,
    20180220,
    20180221,

    20180405,
    20180406,
    20180407,

    20180429,
    20180430,
    20180501,

    20180616,
    20180617,
    20180618,

    20180922,
    20180923,
    20180924,

    20181001,
    20181002,
    20181003,
    20181004,
    20181005,
    20181006,
    20181007,
    20181231,

    20190101,
    20190204, 20190205, 20190206, 20190207, 20190208,
    20190405,
    20190429, 20190430, 20190501,
    20190607,
    20190913,
    20191001, 20191002, 20191003, 20191004, 20191007,
]


class TradingDay(object):
    CONST_FESTIVALS = CONST_FESTIVALS_LIST

    def __init__(self, festivals):
        self.__festivals = [datetime.datetime.strptime(str(i), '%Y%m%d').date() for i in CONST_FESTIVALS_LIST]
        self.__trading_days = {}
        self.__trading_list = []
        self.__build_trading_day()

    def print_festivals(self):
        for l in self.__festivals:
            print(l)

    def __build_trading_day(self):
        start = datetime.date(2011, 1, 4)
        end = datetime.date(2019, 12, 31)
        last_trading_day = start
        for i in range((end - start).days + 1):
            naturalday = start + datetime.timedelta(days=1 * i)
            trading_day = naturalday
            if naturalday in self.__festivals or naturalday.weekday() in (5, 6):
                trading_day = last_trading_day
            else:
                last_trading_day = naturalday
                self.__trading_list.append(naturalday)
            self.__trading_days[naturalday] = trading_day

    def print_trading_days(self):
        for k, v in sorted(self.__trading_days.items(), key=lambda e: e[0], reverse=False):
            print('naturalday:%s,tradingday:%s' % (k, v))

    def get_trading_day(self, naturalday):
        """
        获取当前交易日
        :param naturalday:
        :return:
        """
        try:
            return self.__trading_days[naturalday]
        except KeyError as e:
            while naturalday.weekday() in (5, 6):
                naturalday = naturalday - relativedelta(days=1)
            return naturalday

    def get_last_trading_days(self, naturalday, num, is_trad=True):
        """
        往前去N个交易日
        :param naturalday:
        :param num:
        :param is_trad:
        :return:
        """
        trad = self.get_trading_day(naturalday)
        if is_trad:  # 不是交易日返回None
            if trad != naturalday:
                return None
        try:
            index = self.__trading_list.index(trad)
            return self.__trading_list[index - num]
        except ValueError:
            diff = 3 if trad.weekday() == 0 else 1
            return trad - relativedelta(days=diff)

    def get_next_trading_days(self, naturalday):
        """
        如果自然日不是交易日，往后推到交易日
        :param naturalday:
        :return:
        """
        trad = self.get_trading_day(naturalday)
        index = self.__trading_list.index(trad)
        if trad != naturalday:
            return self.__trading_list[index + 1]
        else:
            return self.__trading_list[index]

    def get_next_num_trading_days(self, naturalday, num):
        """
        获取下N个交易日
        :param naturalday:
        :param num:
        :return:
        """
        trad = self.get_trading_day(naturalday)
        try:
            index = self.__trading_list.index(trad)
            return self.__trading_list[index + num]
        except ValueError:
            diff = 3 if trad.weekday() == 4 else 1
            return trad + relativedelta(days=diff)

    def get_last_trading_day_for_month(self, naturalday):
        """
        获取当月的最后一个交易日
        :param naturalday:
        :return:
        """
        next_month = naturalday + relativedelta(months=1)
        return self.get_trading_day(datetime.date(next_month.year, next_month.month, 1) - datetime.timedelta(days=1))


if __name__ == '__main__':
    td = TradingDay(TradingDay.CONST_FESTIVALS)
    print td.get_trading_day(date.today())
    print td.get_last_trading_days(date.today(), 3)
    print td.get_next_num_trading_days(date.today(), 3)
    print td.get_next_trading_days(date.today())
    print td.get_last_trading_day_for_month(date.today())
